{"version":3,"file":"index.js","sources":["../src/errors.ts","../src/api-client/api-client.ts","../src/endpoints/base-endpoint.ts","../src/endpoints/autoload/items/endpoint.ts","../src/endpoints/autoload/profile/endpoint.ts","../src/endpoints/autoload/reports/endpoints.ts","../src/endpoints/autoload/endpoint.ts","../src/avito.ts"],"sourcesContent":["export class AvitoError extends Error {\n  public response: Response;\n\n  constructor(message: string, response: Response) {\n    super(message);\n    this.response = response;\n  }\n}\n\nexport class AvitoApiError extends AvitoError {\n  public code: number;\n  public message: string;\n\n  constructor(code: number, message: string, response: Response) {\n    super(message, response);\n    this.code = code;\n    this.message = message;\n  }\n}\n","import { version } from \"../../package.json\" with { type: \"json\" };\nimport { AvitoApiError } from \"../errors\";\n\nexport type Token = {\n  access_token: string;\n  expires_in: number;\n  token_type: string;\n};\n\nexport type CredentialsAuth = {\n  client_id: string;\n  сlient_secret: string;\n  getToken: () => Token | Promise<Token | null | undefined>;\n  setToken: (token: Token) => void | Promise<any>;\n};\n\n// TODO: Сделать\nexport type TokenAuth = {\n  token: string;\n};\n\nexport type Auth = CredentialsAuth;\n\nexport type ApiClientOptions = {\n  /**\n   * Базовый URL\n   *\n   * @default https://api.avito.ru\n   */\n  baseUrl?: string;\n\n  /**\n   * User-Agent header\n   *\n   * @default `avito-api/${version} (+https://github.com/demark-pro/avito-api)`, где `{version}` - версия библиотеки\n   */\n  userAgent?: string;\n  /**\n   * Опции авторизации\n   *\n   * {@linkcode Auth}\n   */\n  auth: Auth;\n};\n\ntype RequestOptions = Omit<RequestInit, \"body\"> & {\n  body?: object;\n  searchParams?: URLSearchParams;\n};\ntype RequestOptionsWithoutMethod = Omit<RequestOptions, \"method\">;\n\nconst DEFAULT_TOKEN: Token = {\n  access_token: \"\",\n  expires_in: 0,\n  token_type: \"Bearer\",\n};\n\nexport class ApiClient {\n  private baseUrl: string;\n  private userAgent: string;\n  private auth: Auth;\n  private retrieveToken: boolean = false;\n\n  constructor(options: ApiClientOptions) {\n    this.baseUrl = options.baseUrl ?? \"https://api.avito.ru\";\n    this.userAgent =\n      options.userAgent ??\n      `avito-api/${version} (+https://github.com/demark-pro/avito-api)`;\n    this.auth = options.auth;\n  }\n\n  async request(\n    endpoint: string,\n    { searchParams, ...options }: RequestOptions = {},\n  ): Promise<Response> {\n    const url = this.buildUrl(endpoint);\n\n    const avitoToken = (await this.auth.getToken()) ?? DEFAULT_TOKEN;\n\n    const response = await fetch(\n      url.toString() +\n        (searchParams && searchParams.size > 0\n          ? `?${searchParams.toString()}`\n          : \"\"),\n      {\n        ...options,\n        body: options.body ? JSON.stringify(options.body) : undefined,\n        headers: {\n          ...options.headers,\n          Authorization: `${avitoToken.token_type} ${avitoToken.access_token}`,\n          \"User-Agent\": this.userAgent,\n          \"Content-Type\": \"application/json\",\n        },\n      },\n    );\n\n    if (response.ok) return response;\n\n    const { error } = await response.json();\n\n    if (response.status === 403 || response.status === 401) {\n      if (this.retrieveToken) {\n        // console.log(\"retrieveToken error - \", error)\n\n        throw new AvitoApiError(error.code, error.message, response);\n      }\n\n      const token = await this._getToken();\n      await this.auth.setToken(token);\n      this.retrieveToken = true;\n\n      return this.request(endpoint, { ...options, searchParams });\n    }\n\n    throw new AvitoApiError(error.code, error.message, response);\n  }\n\n  private async _getToken(): Promise<Token> {\n    const searchParams = new URLSearchParams();\n    searchParams.append(\"grant_type\", \"client_credentials\");\n    searchParams.append(\"client_id\", this.auth.client_id);\n    searchParams.append(\"client_secret\", this.auth.сlient_secret);\n\n    const response = await this.post(`/token`, {\n      searchParams: searchParams,\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n    });\n\n    if (response.ok) return response.json();\n\n    const { error } = await response.json();\n    throw new AvitoApiError(error.code, error.message, response);\n  }\n\n  /**\n   * Shorthand для GET запроса.\n   *\n   * {@linkcode request}\n   * */\n  async get(\n    url: string,\n    options: RequestOptionsWithoutMethod = {},\n  ): Promise<Response> {\n    return this.request(url, { ...options, method: \"GET\" });\n  }\n\n  /**\n   * Shorthand для POST запроса.\n   *\n   * {@linkcode request}\n   */\n  async post(\n    url: string,\n    options: RequestOptionsWithoutMethod = {},\n  ): Promise<Response> {\n    return this.request(url, { ...options, method: \"POST\" });\n  }\n\n  /**\n   * Shorthand для PUT запроса.\n   *\n   * {@linkcode request}\n   */\n  async put(\n    url: string,\n    options: RequestOptionsWithoutMethod = {},\n  ): Promise<Response> {\n    return this.request(url, { ...options, method: \"PUT\" });\n  }\n\n  /**\n   * Shorthand для DELETE запроса.\n   *\n   * {@linkcode request}\n   */\n  async delete(\n    url: string,\n    options: RequestOptionsWithoutMethod = {},\n  ): Promise<Response> {\n    return this.request(url, { ...options, method: \"DELETE\" });\n  }\n\n  /**\n   * Нормализует URL, удаляя лишние слеши.\n   *\n   * @param url - URL\n   *\n   * @returns Нормализованный URL\n   */\n  private normalizeUrl(url: string): string {\n    return url.replaceAll(/\\/{2,}/g, \"/\");\n  }\n\n  /**\n   * Строит объект типа `URL` из строки.\n   *\n   * @param url - URL\n   *\n   * @returns Объект типа `URL`\n   */\n  private buildStringUrl(url: string): URL {\n    const shouldIncludeBaseUrl = !url.startsWith(\"http\");\n\n    const returnUrl = shouldIncludeBaseUrl ? `${this.baseUrl}/${url}` : url;\n\n    return new URL(this.normalizeUrl(returnUrl));\n  }\n\n  /**\n   * Cтроит объект типа `URL` из массива строк.\n   *\n   * @param url - массив строк URL\n   *\n   * @returns Объект типа `URL`\n   */\n  private buildArrayUrl(url: string[]): URL {\n    const shouldIncludeBaseUrl = !url[0]?.startsWith(\"http\");\n\n    const returnUrl = shouldIncludeBaseUrl\n      ? `${this.baseUrl}/${url.join(\"/\")}`\n      : url.join(\"/\");\n\n    return new URL(this.normalizeUrl(returnUrl));\n  }\n\n  /**\n   * Строит URL из строки или массива строк.\n   *\n   * @param url - строка или массив строк URL\n   *\n   * @returns Объект типа `URL` с нормализованным URL и базовым адресом, указанным в опциях инциализации\n   *\n   * @example С массивом строк\n   * ```ts\n   * buildUrl([\"autoload\", \"v2\", \"profile\"])\n   * // \"https://api.avito.ru/autoload/v2/profile\"\n   * ```\n   *\n   * @example Со строкой\n   * ```ts\n   * buildUrl(\"/autoload/v2/profile\")\n   * // \"https://api.avito.ru/autoload/v2/profile\"\n   * ```\n   */\n  buildUrl(url: string | string[]): URL {\n    if (typeof url === \"string\") return this.buildStringUrl(url);\n\n    return this.buildArrayUrl(url);\n  }\n}\n","import type { ApiClient } from \"../api-client\";\n\nexport class BaseEndpoint {\n  protected client: ApiClient;\n\n  constructor(client: ApiClient) {\n    this.client = client;\n  }\n}\n","import { BaseEndpoint } from \"../../base-endpoint\";\nimport type { ItemsResponse } from \"../../../types\";\nimport type {\n  AutoloadItemShort,\n  ListAdIdsAutoloadItemsOptions,\n  ListAvitoIdsAutoloadItemsOptions,\n} from \"./types\";\n\nconst ENDPOINT_URL = `/autoload/v2/items`;\n\nexport class AutoloadItemsEndpoint extends BaseEndpoint {\n  /**\n   * ID объявлений из файла\n   *\n   * Метод позволяет получить идентификаторы (ID) объявлений из файла автозагрузки по ID объявлений на Авито.\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getAdIdsByAvitoIds\n   *\n   * @param options Параметры запроса {@linkcode ListAdIdsAutoloadItemsOptions}\n   * @returns Список связанных идентификаторов (ID) объявлений из файла с идентификаторами (ID) на Авито {@linkcode ItemsResponse<AutoloadItemShort>}\n   */\n  async getAdIds(\n    options: ListAdIdsAutoloadItemsOptions,\n  ): Promise<ItemsResponse<AutoloadItemShort>> {\n    const query = options.query\n      .filter((id) => typeof id === \"number\")\n      .join(\",\");\n    const response = await this.client.get(\n      `${ENDPOINT_URL}/ad_ids?query=${query}`,\n    );\n\n    return response.json();\n  }\n\n  /**\n   * ID объявлений на Авито\n   *\n   * Метод позволяет получить идентификаторы (ID) объявлений на Авито по идентификаторам объявлений из файла автозагрузки.\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getAvitoIdsByAdIds\n   *\n   * @param options Параметры запроса {@linkcode ListAvitoIdsAutoloadItemsOptions}\n   * @returns Список связанных идентификаторов (ID) объявлений\n   * из файла с идентификаторами (ID) на Авито {@linkcode ItemsResponse<AutoloadItemShort>}\n   */\n  async getAvitoIds(\n    options: ListAvitoIdsAutoloadItemsOptions,\n  ): Promise<ItemsResponse<AutoloadItemShort>> {\n    const query = options.query.filter((id) => id.trim().length).join(\",\");\n    const response = await this.client.get(\n      `${ENDPOINT_URL}/avito_ids?query=${query}`,\n    );\n\n    return response.json();\n  }\n}\n","import { BaseEndpoint } from \"../../base-endpoint\";\nimport type { AutoloadProfile, AutoloadProfileCreateOrUpdate } from \"./types\";\n\nconst ENDPOINT_URL = \"/autoload/v2/profile\";\n\nexport class AutoloadProfileEndpoint extends BaseEndpoint {\n  /**\n   * Получение профиля пользователя автозагрузки\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getProfileV2\n   *\n   * @returns Возвращает настройки профиля пользователя автозагрузки. {@linkcode AutoloadProfile}\n   */\n  async get(): Promise<AutoloadProfile> {\n    const response = await this.client.get(`${ENDPOINT_URL}`);\n\n    return response.json();\n  }\n\n  /**\n   * Создание/редактирование настроек профиля пользователя автозагрузки\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/createOrUpdateProfileV2\n   *\n   * @returns Успешное обновление настроек профиля\n   */\n  async createOrUpdate(body: AutoloadProfileCreateOrUpdate): Promise<boolean> {\n    const response = await this.client.post(`${ENDPOINT_URL}`, { body });\n\n    return response.ok;\n  }\n}\n","import { BaseEndpoint } from \"../../base-endpoint\";\nimport type { ItemsResponse } from \"../../../types\";\nimport type {\n  AutoloadReport,\n  GetAutoloadReportItemsOptions,\n  GetAutoloadReportsItemsOptions,\n  ListAutoloadReportItems,\n  ListAutoloadReportItemsFees,\n  ListAutoloadReportItemsFeesOptions,\n  ListAutoloadReports,\n  ListAutoloadReportsOptions,\n} from \"./types\";\nimport type { AutoloadItem } from \"../items\";\n\nconst ENDPOINT_URL = `/autoload/v2/reports`;\nconst ENDPOINT_URL_V3 = `/autoload/v3/reports`;\n\nexport class AutoloadReportsEndpoint extends BaseEndpoint {\n  /**\n   * Список отчётов автозагрузки\n   *\n   * По запросу вы получите список отчётов автозагрузки. Они будут отсортированы в порядке убывания: самый свежий отчёт — в начале списка.\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getReportsV2\n   *\n   * @param options Параметры запроса {@linkcode ListAutoloadReportsOptions}\n   * @returns Возвращает список отчетов {@linkcode ListAutoloadReports}\n   */\n  async list(\n    options: ListAutoloadReportsOptions = {},\n  ): Promise<ListAutoloadReports> {\n    const { perPage, page, dateFrom, dateTo } = options;\n\n    const searchParams = new URLSearchParams();\n    if (perPage) searchParams.append(\"per_page\", perPage.toString());\n    if (page) searchParams.append(\"page\", page.toString());\n    if (dateFrom) searchParams.append(\"date_from\", dateFrom);\n    if (dateTo) searchParams.append(\"date_to\", dateTo);\n\n    const response = await this.client.get(`${ENDPOINT_URL}`, { searchParams });\n\n    return response.json();\n  }\n\n  /**\n   * Статистика по конкретной выгрузке\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getReportByIdV3\n   *\n   * @returns Возвращает сводную статистику с результатами конкретной выгрузки {@linkcode AutoloadReport}\n   */\n  async get(reportId: number): Promise<AutoloadReport> {\n    const response = await this.client.get(`${ENDPOINT_URL_V3}/${reportId}`);\n\n    return response.json();\n  }\n\n  /**\n   * Объявления по ID в автозагрузке\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getAutoloadItemsInfoV2\n   *\n   * @param options Параметры запроса {@linkcode GetAutoloadReportsItemsOptions}\n   * @returns Возвращает данные по конкретным объявлениям. {@linkcode ItemsResponse<AutoloadItem>}\n   */\n  async getItems(\n    options: GetAutoloadReportsItemsOptions,\n  ): Promise<ItemsResponse<AutoloadItem>> {\n    const query = options.query.filter((id) => id.trim().length).join(\",\");\n    const response = await this.client.get(\n      `${ENDPOINT_URL}/items?query=${query}`,\n    );\n\n    return response.json();\n  }\n\n  /**\n   * Все объявления из конкретной выгрузки\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getReportItemsById\n   *\n   * @param reportId ID выгрузки\n   * @param options Параметры запроса {@linkcode GetAutoloadReportItemsOptions}\n   * @returns Возвращает данные по конкретным объявлениям. {@linkcode ListAutoloadReportItems}\n   */\n  async getItemsByReportId(\n    reportId: number,\n    options: GetAutoloadReportItemsOptions = {},\n  ): Promise<ListAutoloadReportItems> {\n    const { perPage, page, query, sections } = options;\n\n    const searchParams = new URLSearchParams();\n\n    if (perPage) searchParams.append(\"per_page\", perPage.toString());\n    if (page) searchParams.append(\"page\", page.toString());\n    if (query)\n      searchParams.append(\n        \"query\",\n        query.filter((id) => id.trim().length).join(\",\"),\n      );\n    if (sections) searchParams.append(\"sections\", sections.join(\",\"));\n\n    const response = await this.client.get(\n      `${ENDPOINT_URL}/${reportId}/items`,\n      { searchParams },\n    );\n\n    return response.json();\n  }\n\n  /**\n   * Списания за объявления в конкретной выгрузке\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getReportItemsFeesById\n   *\n   * С помощью этого метода можно получить информацию о списаниях за размещение каждого объявления в конкретной выгрузке.\n   *\n   * @param reportId ID выгрузки\n   * @param options Параметры запроса {@linkcode ListAutoloadReportItemsFeesOptions}\n   * @returns Возвращает cписок списаний за размещение объявлений {@linkcode ListAutoloadReportItemsFees}\n   */\n  async getItemsFees(\n    reportId: number,\n    options: ListAutoloadReportItemsFeesOptions = {},\n  ): Promise<ListAutoloadReportItemsFees> {\n    const { perPage, page, adIds, avitoIds } = options;\n\n    const searchParams = new URLSearchParams();\n\n    if (perPage) searchParams.append(\"per_page\", perPage.toString());\n    if (page) searchParams.append(\"page\", page.toString());\n    if (adIds)\n      searchParams.append(\n        \"ad_ids\",\n        adIds.filter((id) => id.trim().length).join(\",\"),\n      );\n    if (avitoIds)\n      searchParams.append(\n        \"avito_ids\",\n        avitoIds.filter((id) => typeof id === \"number\").join(\",\"),\n      );\n\n    const response = await this.client.get(\n      `${ENDPOINT_URL}/${reportId}/items/fees`,\n      { searchParams },\n    );\n\n    return response.json();\n  }\n\n  /**\n   * Статистика по последней выгрузке\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/getLastCompletedReportV3\n   *\n   * @returns Возвращает данные по конкретным объявлениям. {@linkcode AutoloadReportsItems}\n   */\n  async getLastCompletedReport(): Promise<AutoloadReport> {\n    const response = await this.client.get(\n      `${ENDPOINT_URL_V3}/last_completed_report`,\n    );\n\n    return response.json();\n  }\n}\n","import type { ApiClient } from \"../../api-client\";\nimport { BaseEndpoint } from \"../base-endpoint\";\nimport { AutoloadItemsEndpoint } from \"./items\";\nimport { AutoloadProfileEndpoint } from \"./profile\";\nimport { AutoloadReportsEndpoint } from \"./reports\";\n\nconst ENDPOINT_URL = \"/autoload\";\n\nexport class AutoloadEndpoint extends BaseEndpoint {\n  public items: AutoloadItemsEndpoint;\n  public profile: AutoloadProfileEndpoint;\n  public reports: AutoloadReportsEndpoint;\n\n  constructor(client: ApiClient) {\n    super(client);\n\n    this.items = new AutoloadItemsEndpoint(client);\n    this.profile = new AutoloadProfileEndpoint(client);\n    this.reports = new AutoloadReportsEndpoint(client);\n  }\n\n  /**\n   * Загрузка файла по ссылке\n   *\n   * @see https://developers.avito.ru/api-catalog/autoload/documentation#operation/upload\n   *\n   * @returns Выгрузка файла по ссылке запущена успешно\n   */\n  async upload(): Promise<boolean> {\n    const response = await this.client.post(`${ENDPOINT_URL}/v1/upload`);\n\n    return response.ok;\n  }\n}\n","import type { ApiClientOptions } from \"./api-client\";\n\nimport { ApiClient } from \"./api-client\";\nimport { AutoloadEndpoint } from \"./endpoints\";\n\nexport class Avito {\n  public client: ApiClient;\n\n  public autoload: AutoloadEndpoint;\n\n  constructor(options: ApiClientOptions) {\n    this.client = new ApiClient(options);\n\n    this.autoload = new AutoloadEndpoint(this.client);\n  }\n}\n"],"names":["ENDPOINT_URL"],"mappings":"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"}